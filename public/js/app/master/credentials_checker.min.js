const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));
const redirectTo = async (url) => {
    await sleep(3000);
    $(location).attr('href', url);
}

var Auth;
const F_authChecker = () => {
    let _token = localStorage.getItem('_jwtApiToken');
    if (_token) {
        axios.get(`/api/user-credentials`, { headers: { 'Accept': 'application/json', 'Authorization': `Bearer ${localStorage.getItem('_jwtApiToken')}` } })
            .then(response => {
                if (response.data.status == 'success') {
                    (localStorage.setItem('_credentials', JSON.stringify(response.data.response_data[0][0])), F_userAuthAction())
                } else {
                    F_userNoAuthAction()
                }
            }).catch(error => {
                F_userNoAuthAction()
            });
    } else {
        F_userNoAuthAction()
    }
}

const F_userAuthAction = () => {
    Auth = 'success'
}
const F_userNoAuthAction = () => {
    Request(1) != 'signin' ? (toastWarning('Unauthenticated'), redirectTo('/signin')) : ''
}

const checkCredentials = () => {
    let user = getUserCredentials();
    let findToken = localStorage.getItem('_jwtApiToken');
    findToken ? (user ? '' : F_userNoAuthAction()) : F_userNoAuthAction();
}

const getUserCredentials = () => {
    let user = localStorage.getItem('_credentials');
    return user ? JSON.parse(user) : '';
}
$(F_authChecker());


/**
 * logout
 */
const userSignout = () => {
    localStorage.clear();
    toastSuccess('Logout Successfully');
    redirectTo('/signin');
}
